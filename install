#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import json
import shutil
import signal
import subprocess as sp


HOME = os.path.expanduser("~")
HERE = os.path.dirname(os.path.abspath(__file__))


with open(os.path.join(HERE, "install.json"), mode="r", encoding="UTF-8") as f:
    install_config = json.load(f)


def install_programs() -> None:
    os.system(
        f'sudo pacman -S {" ".join(install_config["programs"])} '
        '--needed --noconfirm --overwrite "*"'
    )

    if shutil.which("yay") is None:
        yay_path = os.path.join(HERE, "yay")
        if os.path.exists(yay_path):
            os.system(f"rm -rfv {yay_path}")
        os.system(
            f"git clone https://aur.archlinux.org/yay.git {yay_path} "
            f"&& cd {yay_path} && makepkg -si && rm -rfv {yay_path}"
        )

    os.system(
        f'yay -S {" ".join(install_config["aur"])} '
        '--needed --noconfirm'
    )


def install_configs(symlink: bool = True) -> None:
    base_cmd = f'cp -rv --remove-destination {"--symbolic-link" if symlink else ""}'
    for src, dst in install_config["configs"].items():
        src_dir = os.path.join(HERE, "configs")
        if dst.startswith("/"):
            os.system(f"sudo mkdir -pv {dst}")
            os.system(f"sudo {base_cmd} {os.path.join(src_dir, src)} {dst}")
        else:
            dst = os.path.join(HOME, dst)
            os.system(f"mkdir -pv {dst}")
            os.system(f"{base_cmd} {os.path.join(src_dir, src)} {dst}")


def install_python_libs() -> None:
    os.system(f"pip install {' '.join(install_config['python'])}")


def extra_config() -> None:
    os.system("git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm")
    os.system("~/.tmux/plugins/tpm/scripts/install_plugins.sh")


def main() -> None:
    # uts_cmd = f"while true; do sudo -v; sleep 60; done &"
    # uts_pro = sp.Popen(uts_cmd, shell=True, preexec_fn=os.setsid)

    # opts
    install_programs()
    install_configs(symlink=False)
    install_python_libs() 
    extra_config()

    # os.killpg(os.getpgid(uts_pro.pid), signal.SIGTERM)


main()
