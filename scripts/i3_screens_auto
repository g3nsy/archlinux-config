#!/usr/bin/python
# -*- coding: utf-8 -*-

import subprocess as sp
import time
from i3ipc.connection import Connection
from i3ipc.replies import WorkspaceReply


def is_hdmi_connected() -> bool:
    comm = sp.run("xrandr | grep HDMI", shell=True, stdout=-1, stderr=-1)
    return comm.stdout.decode().split()[1] == "connected"


def get_xscreens() -> list:
    comm = sp.run("xrandr", shell=True, stdout=-1, stderr=-1)
    return [
        x.split()[0]
        for x in comm.stdout.decode().split("\n")[1:]
        if x and not x.startswith(" ")
    ]


def get_workspaces_by(i3con: Connection, screen: str) -> list:
    return [x for x in i3con.get_workspaces() if x.ipc_data["output"] == screen]


def move_workspaces_to(i3con: Connection, workspaces: list, direction: str) -> None:
    for w in workspaces:
        i3con.command(f"workspace {w.num}")
        i3con.command(f"move workspace to output {direction}")


def is_workspace_empty(i3con: Connection, wkrepy: WorkspaceReply) -> bool:
    wktarget = i3con.get_tree().find_by_id(wkrepy.ipc_data["id"])
    return not wktarget or not wktarget.workspace().leaves()  # type: ignore


def on_hdmi() -> None:
    if is_hdmi_connected():
        screens = get_xscreens()
        edp = screens[0]
        hdmi = screens[1]
        sp.run(
            f"xrandr --output {hdmi} --primary --mode 1920x1080 " +
            f"--right-of {edp} --output {edp} --off",
            shell=True
        )


def handle_screens() -> None:
    i3con = Connection()
    var = True
    screens = get_xscreens()
    edp = screens[0]
    hdmi = screens[1]
    while True:
        if is_hdmi_connected() and var:
            sp.run(
                f"xrandr --output {hdmi} --primary --mode 1920x1080 "
                + f"--right-of {edp} --output {edp} --off",
                shell=True,
            )
            var = False
            workspaces = get_workspaces_by(i3con, edp)
            if workspaces:
                move_workspaces_to(
                    i3con,
                    [x for x in workspaces if not is_workspace_empty(i3con, x)],
                    "right",
                )
        elif not is_hdmi_connected() and not var:
            sp.run("xrandr --auto", shell=True)
            workspaces = get_workspaces_by(i3con, hdmi)
            if workspaces:
                move_workspaces_to(i3con, workspaces, "left")
            var = True
        time.sleep(5)


if __name__ == "__main__":
    handle_screens()
